#include "genera.h"
#include "Punto.h"

int** floydWarshall(int n,int** A){
  for(int k=0;k<n;k++){
    for(int i=0;i<n;i++){
      for(int j=0;j<n;j++){
        A[i][j]= std::min(A[i][j],A[i][k] + A[k][j]);
      }
    }
  }
  return A;
}
std::list<unsigned int> generaPuntos(unsigned int i,unsigned short d,unsigned short l){
  int x;
	std::list<unsigned int> lista;
	std::cout<<"punto "<<i<<": ";
	for(int j=0;j<d;j++){
		//x=distribution(generator);
		x=rand()%(l-1)+1;
		lista.push_back(x);
		std::cout<<" "<<x;
	}
  return lista;
}
//Generadores.
//Euclideano(n, d, l): Recibe enteros n, d y l. Se generan n puntos numerados
//p1, p2 . . . pn que están en un espacio d-dimensional con coordenadas aleatorias
//enteras entre 1 y l. Devuelve una matriz A de n × n con entradas Aij iguales a la
//distancia euclideana entre el punto pi y el punto pj

//El rango de valores de n es de 3 hasta 1000, el de d es entre 2 y 10 y el rango
//de l está entre 1 y 100. La distribución aleatoria es uniforme. Los entradas de
//la matriz A estan redondeadas al entero superior.
int** genEuclideano(unsigned short n,unsigned short d,unsigned short l){
	Punto punto[n];
	for (unsigned int i=0;i<n;i++){
		Punto punkt(d,generaPuntos(i,d,l));
		std::cout<<endl;
		punto[i]=punkt;
	}
	int** A = new int*[n];
	for (int i=0;i<n;i++){
		A[i]=new int[n+2];
		for(int j=0;j<n;j++){
			A[i][j]=punto[i].distanciaEuclideana(&punto[j]);
			//cout<<"distancia de "<<i<<" a "<<j<<": "<<A[i][j]<<endl;
		}
		//cout<<endl;
	}
	return A;
}
//Manhattan(n, d, l): Recibe enteros n, d y l. Se generan n puntos numerados
//p1, p2 . . . pn que están en un espacio d-dimensional con coordenadas aleatorias
//enteras entre 1 y l. Devuelve una matriz A de n × n con entradas Aij iguales a la
//distancia Manhattan entre el punto pi y el punto pj

//El rango de valores de n es de 3 hasta 1000, el de d es entre 2 y 10 y el rango
//de l está entre 1 y 100. La distribución aleatoria es uniforme.
int** genManhattan(unsigned short n,unsigned short d,unsigned short l){
	Punto punto[n];
	for (unsigned int i=0;i<n;i++){
		Punto punkt(d,generaPuntos(i,d,l));
		cout<<endl;
		punto[i]=punkt;
  }
	int** A = new int*[n];
	for (int i=0;i<n;i++){
		A[i]=new int[n+2];
		for(int j=0;j<n;j++){
			A[i][j]=punto[i].distanciaManhattan(&punto[j]);
			//cout<<"distancia de "<<i<<" a "<<j<<": "<<A[i][j]<<endl;
		}
		//cout<<endl;
	}
	return A;
}
// Gráfica(n, l): Recibe dos enteros n y l. Genera la gráfica completa Kn de
// aristas con costo aleatorio entero entre 1 y l. Devuelve una matriz A de n×n con
// entradas Aij iguales al costo mínimo de ir del vértice vi al vértice vj

// El rango de valores de n es de 3 hasta 1000 y el rango de l está entre 1 y 100.
// La distribución aleatoria es uniforme. El camino mínimo de la gráfica se obtiene
// aplicando el algoritmo de Floyd−Warshall

int** genGrafico(unsigned short n,unsigned short l){
	int** A = new int*[n];
	for (int i=0;i<n;i++){
		A[i]=new int[n+2];
		for(int j=0;j<n;j++){
			A[i][j] = rand()%(l-1)+1;
			//cout<<"distancia de "<<i<<" a "<<j<<": "<<A[i][j]<<endl;
		}
		A[i][i]=0;
		//cout<<endl;
	}
	for (int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			A[i][j] = A[j][i];
		}
		A[i][i]=0;
	}
	A = floydWarshall(n,A);
	return A;
}
int main(){
	return 0;
}
